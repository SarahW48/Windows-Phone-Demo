using System;
using System.Web;
/// <summary>
/// Summary description for Class1
/// </summary>
public class WeightComputer
{
    private int choiceNum;
    //private int resultNum;
    //two matrix
    public WeightComputer(int[] input, double[,] output, double[,] output2, int ctgrNum) //the input is 
    {
        choiceNum = input.Length;//all choices 56 in total
        int famousNum = 5;
        int noFamousNum = 7;
        double[] weight = new double[famousNum];
        double[] weight2 = new double[noFamousNum];

        //if(output.GetLength(0) != ctgrNum)
            //throw new Exception("Unmatched array!");
        /* support matrix
         * given by the Apriori Algorithm according to the survey
         * used to compute the weight matrix by multiplying with the input matrix
         * will be revised when the data is done
         */
        /*
        double[,] SupportMatrix = new double[,]
               {{0,   0.25, 0.25, 0.25, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24}, 
{0,-0.03,-0.03,-0.02,-0.01,-0.01,0.01, 0,    0.01, 0.01, 0.01, 0.01, 0.01}, 
{0,0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24}, 
{0,0.08, 0.08, 0.08, 0.08, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09}, 
{0,0.25, 0.25, 0.25, 0.25, 0.24, 0.24, 0.24, 0.25, 0.25, 0.25, 0.25, 0.25}, 
{0,0.19, 0.19, 0.19, 0.18, 0.18, 0.17, 0.18, 0.16, 0.16, 0.16, 0.17, 0.16}, 
{0,0.24, 0.24, 0.24, 0.24, 0.24, 0.23, 0.23, 0.23, 0.23, 0.23, 0.24, 0.23}, 
{0,0.1,  0.1,  0.1,  0.11, 0.1,  0.11, 0.11, 0.11, 0.12, 0.11, 0.11, 0.11}, 
{0,0.25, 0.25, 0.25, 0.25, 0.24, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25}, 
{0,0.15, 0.15, 0.15, 0.14, 0.14, 0.13, 0.14, 0.13, 0.13, 0.13, 0.13, 0.13}, 
{0,0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24}, 
{0,0.07, 0.07, 0.07, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08}, 
{0,-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},   
{0,-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},   
{0,-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},   
{0,-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},   
{0,-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},   
{0,0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.25, 0.25, 0.26, 0.26, 0.25}, 
{0,0.09, 0.09, 0.09, 0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1},  
{0,0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26}, 
{0,0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12}, 
{0,0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26}, 
{0,0.14, 0.14, 0.14, 0.14, 0.15, 0.14, 0.14, 0.14, 0.13, 0.14, 0.14, 0.14}, 
{0,0.26, 0.26, 0.26, 0.26, 0.25, 0.26, 0.25, 0.26, 0.26, 0.26, 0.25, 0.25}, 
{0,-0.09,-0.09,-0.09,-0.09,-0.08,-0.07,-0.08,-0.07,-0.07,-0.06,-0.07,-0.06},
{0,0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.25, 0.25, 0.25, 0.25, 0.25}, 
{0,0.25, 0.25, 0.25, 0.25, 0.24, 0.25, 0.25, 0.24, 0.25, 0.25, 0.25, 0.24}, 
{0,-0.05,-0.05,-0.05,-0.04,-0.03,-0.02,-0.03,-0.01,-0.02,-0.01,-0.01,-0.01},
{0,0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.09, 0.08, 0.08}, 
{0,0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25}, 
{0,0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.21, 0.22, 0.21}, 
{0,0.24, 0.24, 0.24, 0.23, 0.22, 0.22, 0.23, 0.22, 0.21, 0.22, 0.22, 0.22}, 
{0,0.15, 0.15, 0.15, 0.15, 0.15, 0.14, 0.15, 0.14, 0.14, 0.14, 0.14, 0.14}, 
{0,0.25, 0.25, 0.25, 0.25, 0.24, 0.25, 0.25, 0.25, 0.24, 0.25, 0.25, 0.25}};
*/

            double[,] SupportMatrix = new double[,]
            {
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,   0.19,      0,      0,      0},
                {      0,   0.19,      0,      0,      0},
                {      0,      0,      0,      0,   0.13},
                {      0,      0,      0,   0.12,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {    0.3,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,   0.19,      0,      0,      0},
                {      0,      0,      0,   0.12,      0},
                {    0.3,      0,      0,      0,      0},
                {      0,      0,      0,   0.12,      0},
                {      0,      0,      0,   0.12,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,  -0.12,      0},
                {      0,   0.19,      0,      0,      0},
                {    0.3,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,   0.19,      0,      0,      0},
                {      0,      0,      0,   0.12,      0},
                {  -0.12,   0.19,   0.18,  -0.12,   0.13},
                {      0,   0.19,      0,  -0.12,      0},
                {    0.3,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {  -0.12,   0.19,      0,   0.12,      0},
                {      0,      0,   0.18,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,   0.13},
                {      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0},
                {    0.3,      0,      0,      0,      0},
                {      0,      0,   0.18,      0,      0}         
            
            };
            double[,] SupportMatrix2 = new double[,]
            {
                {      0,      0,      0,      0,      0,      0,      0},
                {  -0.05,      0,      0,  -0.05,      0,   0.05,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,   0.11,  -0.05,      0,      0,   0.05,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,   0.11,      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0,      0,   0.05},
                {   0.41,      0,      0,      0,  -0.05,  -0.05,  -0.05},
                {      0,      0,      0,   0.07,      0,      0,      0},
                {      0,   0.11,      0,      0,   0.11,   0.05,  -0.05},
                {   0.41,      0,      0,  -0.05,  -0.05,  -0.05,      0},
                {      0,  -0.05,      0,   0.07,      0,   0.05,      0},
                {      0,  -0.05,      0,      0,   0.11,      0,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,   0.11,      0,      0,      0,  -0.05,      0},
                {      0,      0,      0,   0.07,      0,      0,   0.05},
                {      0,   0.11,   0.11,   0.07,  -0.05,      0,      0},
                {      0,  -0.05,      0,   0.07,      0,   0.05,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,   0.11,      0,      0,      0,  -0.05,      0},
                {      0,   0.11,   0.11,   0.07,      0,   0.05,  -0.05},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,  -0.05,   0.11,      0,   0.11,   0.05,      0},
                {      0,  -0.05,      0,      0,   0.11,   0.05,      0},
                {      0,  -0.05,      0,   0.07,      0,      0,   0.05},
                {      0,   0.11,  -0.05,      0,  -0.05,  -0.05,  -0.05},
                {      0,   0.11,      0,      0,  -0.05,  -0.05,      0},
                {      0,   0.11,      0,      0,  -0.05,      0,   0.05},
                {      0,      0,      0,   0.07,      0,      0,   0.05},
                {      0,      0,      0,      0,   0.11,   0.05,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,   0.11,   0.05,      0},
                {      0,      0,      0,      0,  -0.05,      0,      0},
                {      0,      0,      0,   0.07,      0,      0,      0},
                {      0,   0.11,      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,   0.11,   0.05,      0},
                {      0,      0,      0,   0.07,      0,      0,      0},
                {      0,      0,      0,      0,  -0.05,      0,   0.05},
                {      0,      0,      0,   0.07,   0.11,      0,  -0.05},
                {      0,   0.11,      0,   0.07,  -0.05,      0,      0},
                {      0,      0,      0,  -0.05,      0,   0.05,      0},
                {      0,   0.11,      0,  -0.05,  -0.05,  -0.05,  -0.05},
                {      0,  -0.05,   0.11,   0.07,   0.11,      0,   0.05},
                {      0,   0.11,      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,      0,  -0.05,   0.07,      0,   0.05,   0.05},
                {      0,      0,      0,      0,      0,   0.05,      0},
                {      0,      0,      0,      0,      0,      0,      0},
                {      0,   0.11,      0,      0,      0,   0.05,      0},
                {  -0.05,      0,      0,      0,      0,      0,      0},
                {      0,      0,      0,   0.07,   0.11,      0,   0.05},      
            
            };

            //if (input.Length != SupportMatrix.GetLength(0))
            //{
               // Console.WriteLine("Support Matrix Error. Program Exit.");
                //return;
            //}

            /* matrix multiplication
             * calculate the result matrix by multiply the input 
             * matrix with the support matrix
             * get the weight of each personality
             */

            //the first popular 5 categories
            for (int j = 0; j < choiceNum; j++)
            {
                for (int i = 0; i < famousNum; i++)
                    weight[i] += input[j] * SupportMatrix[j, i];
            }

            //the not famouse categories
            for (int j = 0; j < choiceNum; j++)
            {
                for (int i = 0; i < noFamousNum; i++)
                    weight2[i] += input[j] * SupportMatrix2[j, i];
            }

            /*get the max one for the 5 famous category*/
            int max = 0;
            try
            {
                getFirstMaxIndex(weight, ref max);
            }
            catch (Exception exc)
            {
                Console.WriteLine(exc.Message);
            }
            /*get the max one for the 7 not famous category*/          
            for (int i = 0; i < famousNum; i++)
            {
                //output[i, 0] = i;
                if ((i != max) )
                {
                    output[i, 1] = 0;
                }
                else 
                {
                    output[i, 1] = weight[i];
                }
            }
            
            max = 0;
            try
            {
                getFirstMaxIndex(weight2, ref max);
            }
            catch (Exception exc)
            {
                Console.WriteLine(exc.Message);
            }

            for (int i = 0; i < noFamousNum; i++)
            {
                //output2[i, 0] = i;
                if ((i != max))
                {
                    output2[i, 1] = 0;
                }
                else
                {
                    output2[i, 1] = weight2[i];
                }
               
            }
            

        }

        /* choose the biggest 2 values in array arr
         * use ref to return the index of the 2 values
         * 
         * max is the index of the biggest value
         * secMax is the index of the 2nd biggest value
         */
        private static void getFirstMaxIndex(double[] arr, ref int max)
        {
            if (arr.Length < 2)
                throw new Exception("invalid array!");
            max = (arr[0] > arr[1]) ? 0 : 1;
            for (int j = 2;j < arr.Length; j++)
            {
                if (arr[j] > arr[max])
                {
                    max = j;
                }
            }
        }

        int smallt, midt;
        int maxsmallt, maxmidt, secsmallt, secmidt;

        private static void AppNumber(int max, int secMax, int smallt, int midt, ref int maxsmallt, ref int maxmidt, ref int secsmallt, ref int secmidt)
        {
            float maxpercent = max / (max + secMax);
            float secpercent = 1 - max;
            maxsmallt = (int)(Math.Round(maxpercent) * (smallt - 1));
            maxmidt = (int)(Math.Round(maxpercent) * (midt - 1));
            secsmallt = smallt - maxsmallt;
            secmidt = midt - secmidt;
        }
}
